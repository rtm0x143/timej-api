---
include:
  - template: Jobs/Dependency-Scanning.gitlab-ci.yml
  - project: 'pujak/infrastructure/gitlab-ci'
    ref: master
    file:
      - 'jobs/build.yml'
      - 'jobs/review.yml'
      - 'jobs/security.yml'
      - 'jobs/env-cleaner.yml'
      - 'jobs/deploy.yml'


workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: always

    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always

    - if: $CI_COMMIT_BRANCH == "main"
      when: always

    - if: $CI_COMMIT_MESSAGE =~ /skip-ci/
      when: never

    - if: $CI_COMMIT_BRANCH =~ /feature/ && $CI_COMMIT_MESSAGE =~ /CI/
      when: always

    - when: never


stages:
  - operation
  - build
  - review
  - test
  - security
  - deploy


build-image:
  variables:
    DOCKERFILE_PATH: ./TimejApi


.deploy:
  variables:
    HELM_PATH: .helm/charts/api


deploy-db:
  stage: deploy
  extends:
    - .deploy

  variables:
    HELM_PATH: .helm/charts/database
    KUBE_NAMESPACE: $CI_PROJECT_NAME-static-$CI_COMMIT_BRANCH-db
    HOST: "$CI_COMMIT_BRANCH.$CI_PROJECT_NAME.$KUBE_HOST"

  script:
    - helm upgrade --set host=$HOST,db_pass=$DB_PASSWORD --namespace $KUBE_NAMESPACE $KUBE_NAMESPACE $HELM_PATH --install --create-namespace
    - echo Database is up and available at $HOST

  environment:
    name: $CI_COMMIT_BRANCH-db
    url: $HOST
    action: start

  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
    - when: never


deploy-redis:
  stage: deploy
  extends:
    - deploy-db

  variables:
    HELM_PATH: .helm/charts/redis
    KUBE_NAMESPACE: $CI_PROJECT_NAME-static-$CI_COMMIT_BRANCH-redis

  environment:
    name: $CI_COMMIT_BRANCH-redis
    url: $HOST
    action: start


deploy-review:
  script:
    - helm upgrade --set image=$IMAGE_NAME,host=$HOST,db_conn=$DB_CONNECTION_STRING --namespace $KUBE_NAMESPACE $KUBE_NAMESPACE $HELM_PATH --install --create-namespace
    - echo Your application is up and available at $HOST


deploy:
  script:
    - helm upgrade --set image=$IMAGE_NAME,host=$HOST,db_conn=$DB_CONNECTION_STRING --namespace $KUBE_NAMESPACE $KUBE_NAMESPACE $HELM_PATH --install --create-namespace
    - echo Application is up and available at $HOST
    - 'curl -i -H "Accept: application/json" -H "Content-Type:application/json" -X POST --data "{\"content\": \"${DISCORD_MESSAGE}\"}" $DISCORD_PROD_WEBHOOK'
