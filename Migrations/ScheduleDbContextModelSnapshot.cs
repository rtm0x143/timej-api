// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TimejApi.Data;

#nullable disable

namespace TimejApi.Migrations
{
    [DbContext(typeof(ScheduleDbContext))]
    partial class ScheduleDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TimejApi.Data.Models.Auditory", b =>
                {
                    b.Property<long>("AuditoryNumber")
                        .HasColumnType("bigint");

                    b.Property<long>("BuildingNumber")
                        .HasColumnType("bigint");

                    b.HasKey("AuditoryNumber", "BuildingNumber");

                    b.HasIndex("BuildingNumber");

                    b.ToTable("Auditories");
                });

            modelBuilder.Entity("TimejApi.Data.Models.Building", b =>
                {
                    b.Property<long>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Number"));

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Number");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("TimejApi.Data.Models.Faculty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("TimejApi.Data.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uuid");

                    b.Property<long>("GroupNumber")
                        .HasColumnType("bigint");

                    b.Property<int>("groupNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("TimejApi.Data.Models.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long?>("AuditoryBuildingNumber")
                        .HasColumnType("bigint");

                    b.Property<long?>("AuditoryNumber")
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("LessonTypeId")
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LessonTypeId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("AuditoryNumber", "AuditoryBuildingNumber");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("TimejApi.Data.Models.LessonGroup", b =>
                {
                    b.Property<Guid>("LessonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<long?>("SubgroupNumber")
                        .HasColumnType("bigint");

                    b.HasKey("LessonId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("LessonGroup");
                });

            modelBuilder.Entity("TimejApi.Data.Models.LessonType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LessonTypes");
                });

            modelBuilder.Entity("TimejApi.Data.Models.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("TimejApi.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("StudentGroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StudentGroupId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TimejApi.Data.Models.UserEditFacultyPermission", b =>
                {
                    b.Property<Guid>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AllowedFacultyId")
                        .HasColumnType("uuid");

                    b.HasKey("EditorId", "AllowedFacultyId");

                    b.HasIndex("AllowedFacultyId");

                    b.ToTable("UserEditFacultyPermission");
                });

            modelBuilder.Entity("TimejApi.Data.Models.UserRole", b =>
                {
                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Role", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("TimejApi.Data.Models.Auditory", b =>
                {
                    b.HasOne("TimejApi.Data.Models.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("TimejApi.Data.Models.Group", b =>
                {
                    b.HasOne("TimejApi.Data.Models.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("TimejApi.Data.Models.Lesson", b =>
                {
                    b.HasOne("TimejApi.Data.Models.LessonType", "LessonType")
                        .WithMany()
                        .HasForeignKey("LessonTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimejApi.Data.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimejApi.Data.Models.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimejApi.Data.Models.Auditory", "Auditory")
                        .WithMany()
                        .HasForeignKey("AuditoryNumber", "AuditoryBuildingNumber");

                    b.Navigation("Auditory");

                    b.Navigation("LessonType");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("TimejApi.Data.Models.LessonGroup", b =>
                {
                    b.HasOne("TimejApi.Data.Models.Group", "Group")
                        .WithMany("Lessons")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimejApi.Data.Models.Lesson", "Lesson")
                        .WithMany("AttendingGroups")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("TimejApi.Data.Models.User", b =>
                {
                    b.HasOne("TimejApi.Data.Models.Group", "StudentGroup")
                        .WithMany()
                        .HasForeignKey("StudentGroupId");

                    b.Navigation("StudentGroup");
                });

            modelBuilder.Entity("TimejApi.Data.Models.UserEditFacultyPermission", b =>
                {
                    b.HasOne("TimejApi.Data.Models.Faculty", "AllowedFaculty")
                        .WithMany("Editors")
                        .HasForeignKey("AllowedFacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimejApi.Data.Models.User", "Editor")
                        .WithMany("AllowedFaculties")
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AllowedFaculty");

                    b.Navigation("Editor");
                });

            modelBuilder.Entity("TimejApi.Data.Models.UserRole", b =>
                {
                    b.HasOne("TimejApi.Data.Models.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimejApi.Data.Models.Faculty", b =>
                {
                    b.Navigation("Editors");
                });

            modelBuilder.Entity("TimejApi.Data.Models.Group", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("TimejApi.Data.Models.Lesson", b =>
                {
                    b.Navigation("AttendingGroups");
                });

            modelBuilder.Entity("TimejApi.Data.Models.User", b =>
                {
                    b.Navigation("AllowedFaculties");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
